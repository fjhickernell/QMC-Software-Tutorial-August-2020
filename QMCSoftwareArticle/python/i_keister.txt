>>> import numpy as np
>>> d = 2
>>> def my_Keister(x): # create a custom function
...     norm = np.sqrt((x**2).sum(1))
...     out = np.pi**(d/2)*np.cos(norm)
...     return out # x is (nxd), out is a length-n vector
>>> true_measure = qp.Gaussian(d,mean = 0, covariance = 1/2)
>>> keister = qp.CustomFun(
...     discrete_distrib = qp.Halton(d),
...     g = my_Keister,
...     true_measure = true_measure)
>>>  x = keister.discrete_distrib.gen_samples(1000)
>>> y = keister.f(x) # evaluate transformed integrand
>>> y.mean() # approximate the integral
1.808459727813744
