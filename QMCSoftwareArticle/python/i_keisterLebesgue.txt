>>> import numpy as np
>>> d = 2
>>> def my_L_Keister(x): # create a custom function
...     norm_sq = (x**2).sum(1)
...     out = (d/2)*np.cos(np.sqrt(norm_sq))*np.exp(-norm_sq)
...     return out  # size n vector
>>> true_measure = qp.Lebesgue(qp.Gaussian(d))
>>> keister = qp.CustomFun(
...     discrete_distrib = qp.Halton(d),
...     g = my_L_Keister,
...     true_measure = true_measure)
>>> x = keister.discrete_distrib.gen_samples(1000)
>>> y = keister.f(x) # evaluate transformed integrand
>>> y.mean() # approximate the integral
1.808009697545717
